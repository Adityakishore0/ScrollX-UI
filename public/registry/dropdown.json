{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropdown",
  "type": "registry:component",
  "title": "Dropdown",
  "description": "Animated Dropdown Reveals a menu of options or actions when activated by a button.",
  "author": "Ahdeetai <https://aditya.is-cool.devis>",
  "dependencies": [
    "framer-motion",
    "lucide-react",
    "@radix-ui/react-dropdown-menu",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "components/ui/dropdown.tsx",
      "target": "components/ui/dropdown.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuLabel\n} from \"@radix-ui/react-dropdown-menu\";\nimport { ChevronDown } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\n\nexport interface MenuItem {\n  title: string;\n  description: string;\n  icon: React.ReactNode;\n}\n\ninterface DropdownProps {\n  menuItems?: MenuItem[];\n  triggerText?: string;\n  menuTitle?: string;\n  onSelect?: (title: string) => void;\n  maxHeight?: string | number;\n  buttonVariant?:\n    | \"default\"\n    | \"destructive\"\n    | \"outline\"\n    | \"secondary\"\n    | \"ghost\"\n    | \"link\"\n    | \"success\"\n    | \"warning\"\n    | \"info\"\n    | \"dark\"\n    | \"light\"\n    | \"gradient\"\n    | \"glass\";\n  buttonSize?: \"default\" | \"sm\" | \"lg\" | \"icon\";\n}\n\nconst Dropdown: React.FC<DropdownProps> = ({\n  menuItems = [],\n  triggerText = \"Menu\",\n  menuTitle = \"Menu Options\",\n  onSelect,\n  maxHeight = \"16rem\",\n  buttonVariant = \"default\",\n  buttonSize = \"default\"\n}) => {\n  const [open, setOpen] = useState(false);\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n  const [isMobile, setIsMobile] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const checkIfMobile = () => {\n      setIsMobile(\n        window.innerWidth < 768 ||\n          /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n            navigator.userAgent\n          )\n      );\n    };\n    checkIfMobile();\n    window.addEventListener(\"resize\", checkIfMobile);\n    return () => window.removeEventListener(\"resize\", checkIfMobile);\n  }, []);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setOpen(false);\n      }\n    };\n    if (open) document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [open]);\n\n  const handleSelect = (title: string) => {\n    if (onSelect) onSelect(title);\n    setOpen(false);\n  };\n\n  return (\n    <div ref={dropdownRef}>\n      <DropdownMenu open={open} onOpenChange={setOpen}>\n        <DropdownMenuTrigger asChild>\n          <Button variant={buttonVariant} size={buttonSize} className=\"flex items-center gap-2\">\n            <span>{triggerText}</span>\n            <motion.span animate={{ rotate: open ? 180 : 0 }} transition={{ duration: 0.2 }}>\n              <ChevronDown className=\"w-4 h-4\" />\n            </motion.span>\n          </Button>\n        </DropdownMenuTrigger>\n        <AnimatePresence>\n          {open && (\n            <DropdownMenuContent forceMount asChild sideOffset={5}>\n              <motion.div\n                initial={{ opacity: 0, scale: 0.5, rotateX: 40, y: 20 }}\n                animate={{\n                  opacity: 1,\n                  y: 0,\n                  scale: 1,\n                  rotateX: 0,\n                  transition: { type: \"spring\", stiffness: 260, damping: 15 }\n                }}\n                exit={{ opacity: 0, scale: 0.8, rotateX: 10, y: 10, transition: { duration: 0.2 } }}\n                className={cn(\n                  \"w-72 rounded-xl border shadow-xl z-50 overflow-hidden [perspective:800px] [transform-style:preserve-3d]\",\n                  \"bg-white/80 border-neutral-900/10\",\n                  \"dark:bg-neutral-900/80 dark:border-neutral-50/10\"\n                )}\n                style={{ transformOrigin: \"top\" }}\n              >\n                <div className={cn(\"absolute inset-0 z-0\", \"bg-gradient-to-br from-indigo-500/10 to-purple-500/10\", \"dark:from-indigo-500/20 dark:to-purple-500/20\")}></div>\n                <div className=\"absolute inset-0 backdrop-blur-sm z-10\"></div>\n                <div className=\"p-2 sticky top-0 z-20\">\n                  <DropdownMenuLabel className={cn(\"px-3 py-2 font-bold\", \"text-neutral-900\", \"dark:text-neutral-50\")}>{menuTitle}</DropdownMenuLabel>\n                  <DropdownMenuSeparator className={cn(\"my-1 h-px\", \"bg-neutral-900/10\", \"dark:bg-white/10\")} />\n                </div>\n                <div className=\"relative z-20 overflow-y-auto scrollbar-visible\"\n                  style={{\n                    maxHeight: typeof maxHeight === \"number\" ? `${maxHeight}px` : maxHeight,\n                    scrollbarWidth: \"thin\",\n                    scrollbarColor: \"rgba(155, 155, 155, 0.5) transparent\"\n                  }}>\n                  <style jsx global>{`\n                    .scrollbar-visible::-webkit-scrollbar { width: 6px; display: block; }\n                    .scrollbar-visible::-webkit-scrollbar-track { background: transparent; }\n                    .scrollbar-visible::-webkit-scrollbar-thumb {\n                      background-color: rgba(155, 155, 155, 0.5);\n                      border-radius: 20px;\n                    }\n                    .scrollbar-visible::-webkit-scrollbar-thumb:hover {\n                      background-color: rgba(155, 155, 155, 0.7);\n                    }\n                  `}</style>\n                  {menuItems.length > 0 ? menuItems.map((item, idx) => (\n                    <DropdownMenuItem\n                      key={idx}\n                      className=\"focus:outline-none focus:bg-transparent\"\n                      onMouseEnter={!isMobile ? () => setHoveredIndex(idx) : undefined}\n                      onMouseLeave={!isMobile ? () => setHoveredIndex(null) : undefined}\n                      asChild\n                    >\n                      <motion.div\n                        className=\"relative rounded-lg overflow-hidden\"\n                        initial={{ opacity: 0, x: -20 }}\n                        animate={{\n                          opacity: 1,\n                          x: 0,\n                          transition: { delay: idx * 0.05, duration: 0.2 }\n                        }}\n                      >\n                        <AnimatePresence>\n                          {!isMobile && hoveredIndex === idx && (\n                            <motion.div\n                              layoutId=\"hoverBackground\"\n                              initial={{ opacity: 0 }}\n                              animate={{\n                                opacity: 1,\n                                scale: 1.05,\n                                transition: { type: \"spring\", stiffness: 260, damping: 15 }\n                              }}\n                              exit={{ opacity: 0 }}\n                              className={cn(\"absolute inset-0 rounded-lg\", \"bg-gradient-to-r from-indigo-500/10 to-purple-500/10\", \"dark:from-indigo-500/20 dark:to-purple-500/20\")}\n                            />\n                          )}\n                        </AnimatePresence>\n                        <button\n                          className={cn(\"flex items-center w-full p-2 rounded-lg relative z-20 text-left gap-3\", \"text-neutral-900\", \"dark:text-neutral-50\")}\n                          onClick={() => handleSelect(item.title)}\n                        >\n                          <motion.div animate={{ scale: !isMobile && hoveredIndex === idx ? 1.1 : 1, rotate: !isMobile && hoveredIndex === idx ? 5 : 0 }} transition={{ type: \"spring\", stiffness: 500 }}>\n                            {item.icon}\n                          </motion.div>\n                          <div className=\"flex flex-col items-start\">\n                            <motion.span\n                              animate={{ y: !isMobile && hoveredIndex === idx ? -2 : 0, x: !isMobile && hoveredIndex === idx ? 2 : 0 }}\n                              className={cn(\"font-semibold\", \"text-neutral-900\", \"dark:text-neutral-50\")}\n                            >{item.title}</motion.span>\n                            <motion.span\n                              animate={{ y: !isMobile && hoveredIndex === idx ? 2 : 0, x: !isMobile && hoveredIndex === idx ? 2 : 0, opacity: !isMobile && hoveredIndex === idx ? 1 : 0.7 }}\n                              className={cn(\"text-xs\", \"text-neutral-700\", \"dark:text-neutral-300\")}\n                            >{item.description}</motion.span>\n                          </div>\n                        </button>\n                      </motion.div>\n                    </DropdownMenuItem>\n                  )) : (\n                    <div className={cn(\"p-3 text-center\", \"text-neutral-900\", \"dark:text-neutral-50\")}>No menu items available</div>\n                  )}\n                </div>\n              </motion.div>\n            </DropdownMenuContent>\n          )}\n        </AnimatePresence>\n      </DropdownMenu>\n    </div>\n  );\n};\n\nexport default Dropdown;"
    },
    {
      "type": "registry:component",
      "path": "components/ui/button.tsx",
      "target": "components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        success: \"bg-green-600 text-white hover:bg-green-700\",\n        warning: \"bg-yellow-500 text-black hover:bg-yellow-600\",\n        info: \"bg-blue-500 text-white hover:bg-blue-600\",\n        dark: \"bg-gray-800 text-white hover:bg-gray-700\",\n        light: \"bg-gray-100 text-gray-800 hover:bg-gray-200\",\n        gradient:\n          \"bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 text-white hover:opacity-90\",\n        glass:\n          \"bg-white/10 backdrop-blur-md text-white border border-white/20 hover:bg-white/20\"\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\"\n    }\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };"
    },
    {
      "type": "registry:lib",
      "path": "lib/utils.ts",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}"
    }
  ]
}
