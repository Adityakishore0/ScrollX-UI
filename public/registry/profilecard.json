{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "profilecard",
  "type": "registry:component",
  "title": "Profile Card",
  "description": "A reusable profile card component displaying a user's image, name, bio, skills, and social links with interactive animations.",
  "author": "Ahdeetai <https://aditya.is-cool.devis>",
  "dependencies": ["framer-motion", "lucide-react"],
  "files": [
    {
      "type": "registry:component",
      "path": "components/ui/profilecard.tsx",
      "target": "components/ui/profilecard.tsx",
      "content": "\"use client\";\nimport { useState, useRef } from \"react\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { Github, Twitter } from \"lucide-react\";\nimport { ArrowBigLeft } from \"lucide-react\";\nimport {\n  motion,\n  useMotionValue,\n  useTransform,\n  useAnimation,\n  AnimatePresence,\n} from \"framer-motion\";\n\ninterface Skill {\n  name: string;\n  iconUrl: string;\n}\n\ninterface ProfileCardProps {\n  img: string;\n  name: string;\n  bio: string;\n  skills: Skill[];\n  githubUrl?: string;\n  twitterUrl?: string;\n  position: string;\n}\n\nexport default function ProfileCard({\n  img,\n  name,\n  bio,\n  skills,\n  githubUrl,\n  twitterUrl,\n  position,\n}: ProfileCardProps) {\n  const [isRevealed, setIsRevealed] = useState<boolean>(false);\n  const [isImageShrunken, setIsImageShrunken] = useState<boolean>(false);\n  const arrowControls = useAnimation();\n  const dragX = useMotionValue(0);\n  const dragThreshold = 50;\n  const isAnimating = useRef<boolean>(false);\n\n  const arrowRotation = useTransform(dragX, [0, dragThreshold], [-180, 145]);\n\n  const handleDragEnd = () => {\n    if (dragX.get() > dragThreshold && !isRevealed && !isAnimating.current) {\n      isAnimating.current = true;\n      arrowControls.start({ x: dragThreshold, transition: { duration: 0.2 } });\n      setIsImageShrunken(true);\n      setTimeout(() => {\n        setIsRevealed(true);\n        isAnimating.current = false;\n      }, 400);\n    } else if (dragX.get() <= dragThreshold && !isRevealed) {\n      arrowControls.start({\n        x: 0,\n        transition: { type: \"spring\", stiffness: 500, damping: 30 },\n      });\n    } else if (isRevealed) {\n      arrowControls.start({\n        x: dragThreshold,\n        transition: { type: \"spring\", stiffness: 500, damping: 30 },\n      });\n    }\n  };\n\n  const resetCard = () => {\n    if (isRevealed && !isAnimating.current) {\n      isAnimating.current = true;\n      arrowControls.start({ x: 0, transition: { duration: 0.3 } });\n      setIsRevealed(false);\n      setTimeout(() => {\n        setIsImageShrunken(false);\n        isAnimating.current = false;\n      }, 300);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-center\">\n      <div className=\"relative w-[17rem] h-[21.1875rem] rounded-[15px] overflow-hidden shadow-lg bg-neutral-50 dark:bg-black\">\n        <motion.div\n          initial={{ width: \"100%\", height: \"100%\" }}\n          animate={{\n            width: isImageShrunken ? \"6rem\" : \"100%\",\n            height: isImageShrunken ? \"8rem\" : \"100%\",\n            top: isImageShrunken ? \"4rem\" : 0,\n            left: isImageShrunken ? \"1rem\" : 0,\n            borderRadius: isImageShrunken ? \"0.5rem\" : \"0px\",\n          }}\n          transition={{ duration: 0.4, ease: \"easeInOut\" }}\n          className=\"absolute overflow-hidden\"\n        >\n          <Image src={img} alt={name} layout=\"fill\" objectFit=\"cover\" />\n          <motion.div\n            className=\"absolute top-2 right-2 w-[1.6875rem] h-[1.8125rem] flex items-center justify-center bg-white rounded shadow cursor-grab active:cursor-grabbing z-10\"\n            drag=\"x\"\n            dragConstraints={{ left: 0, right: dragThreshold }}\n            dragElastic={0.1}\n            dragMomentum={false}\n            onDragEnd={handleDragEnd}\n            style={{ x: dragX }}\n            animate={arrowControls}\n            whileTap={{ scale: 1.1 }}\n          >\n            <motion.div style={{ rotate: arrowRotation }}>\n              <ArrowBigLeft className=\"w-4 h-4 text-black pointer-events-none\" />\n            </motion.div>\n          </motion.div>\n        </motion.div>\n\n        <AnimatePresence>\n          {isRevealed && (\n            <motion.div\n              key=\"content\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              transition={{ duration: 0.3 }}\n              className=\"absolute inset-0 text-dark\"\n            >\n              <motion.div\n                className=\"absolute top-2 right-2 w-6 h-6 flex items-center justify-center bg-gray-700 rounded-full cursor-pointer z-20\"\n                onClick={resetCard}\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  width=\"16\"\n                  height=\"16\"\n                  fill=\"none\"\n                  stroke=\"white\"\n                  strokeWidth=\"2\"\n                >\n                  <path d=\"M18 6L6 18M6 6l12 12\" />\n                </svg>\n              </motion.div>\n              <div className=\"p-4\">\n                <h1 className=\"text-xl font-bold tracking-wider\">{name}</h1>\n                <p className=\"text-sm tracking-wider\">{position}</p>\n              </div>\n\n              <div className=\"absolute top-[4rem] left-[8rem]\">\n                <h3 className=\"text-lg font-semibold mb-2\">Skills</h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {skills.map((skill, index) => (\n                    <div\n                      key={index}\n                      className=\"bg-gray-300 dark:bg-gray-800 rounded-md p-1 flex items-center justify-center w-8 h-8\"\n                      title={skill.name}\n                    >\n                      <Image\n                        src={skill.iconUrl}\n                        alt={skill.name}\n                        width={20}\n                        height={20}\n                        className=\"text-black dark:text-white\"\n                      />\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"absolute top-[13rem] left-0 px-4\">\n                <p className=\"text-sm\">{bio}</p>\n              </div>\n\n              <div className=\"absolute bottom-4 left-4 flex gap-4\">\n                {twitterUrl && (\n                  <Link href={twitterUrl} target=\"_blank\" rel=\"noreferrer\">\n                    <Twitter className=\"h-5 w-5\" />\n                    <span className=\"sr-only\">Twitter</span>\n                  </Link>\n                )}\n                {githubUrl && (\n                  <Link href={githubUrl} target=\"_blank\" rel=\"noreferrer\">\n                    <Github className=\"h-5 w-5\" />\n                    <span className=\"sr-only\">GitHub</span>\n                  </Link>\n                )}\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {!isRevealed && !isImageShrunken && (\n          <motion.div\n            className=\"absolute top-[0.625rem] right-[2.1875rem] text-white text-xs opacity-80 bg-black bg-opacity-50 px-2 py-1 rounded\"\n            initial={{ opacity: 0 }}\n            animate={{\n              opacity: [0, 0.8, 0],\n              transition: { repeat: Infinity, duration: 2, repeatDelay: 1 },\n            }}\n          >\n            Drag â†’\n          </motion.div>\n        )}\n      </div>\n    </div>\n  );\n}"
    }
  ]
}
