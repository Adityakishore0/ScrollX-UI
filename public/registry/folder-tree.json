{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "folder-tree",
  "type": "registry:component",
  "title": "Folder Tree",
  "description": "A customizable folder tree component for displaying hierarchical data with expandable nodes and file icons.",
  "author": "Jack Phat <https://jackphat.vercel.app/>",
  "dependencies": ["framer-motion", "lucide-react", "clsx", "tailwind-merge"],
  "files": [
    {
      "type": "registry:component",
      "path": "components/ui/folder-tree.tsx",
      "target": "components/ui/folder-tree.tsx",
      "content": "\"use client\";\nimport * as React from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport { ChevronRight, Folder, FolderOpen, File, FileText, Image as ImageIcon, Music, Video as VideoIcon, Code as CodeIcon, Archive, Settings as SettingsIcon, type LucideIcon } from \"lucide-react\";\n\n// Types for the tree data structure\nexport interface TreeNodeType {\n  id: string;\n  name: string;\n  type: 'file' | 'folder';\n  extension?: string;\n  children?: TreeNodeType[];\n  badge?: string | number;\n  [key: string]: any;\n}\n\ninterface TreeNodeProps {\n  node: TreeNodeType;\n  level?: number;\n  expandedIds: Set<string>;\n  selectedId: string | null;\n  onToggle: (id: string) => void;\n  onSelect: (node: TreeNodeType) => void;\n  showIcons?: boolean;\n  showLines?: boolean;\n  iconSize?: number;\n  nodeClassName?: string;\n  selectedClassName?: string;\n  hoverClassName?: string;\n}\n\ninterface FolderTreeProps {\n  data: TreeNodeType;\n  onSelect?: (node: TreeNodeType) => void;\n  onToggle?: (nodeId: string) => void;\n  initialExpanded?: string[];\n  initialSelected?: string | null;\n  showIcons?: boolean;\n  showLines?: boolean;\n  containerClassName?: string;\n  nodeClassName?: string;\n  selectedClassName?: string;\n  hoverClassName?: string;\n  iconSize?: number;\n  maxHeight?: string | number;\n  className?: string;\n}\n\nconst getFileIcon = (extension: string | undefined, isFolder = false): LucideIcon | null => {\n  if (isFolder) return null;\n\n  const iconMap = {\n    // Images\n    png: ImageIcon, jpg: ImageIcon, jpeg: ImageIcon, gif: ImageIcon, svg: ImageIcon, webp: ImageIcon,\n    // Audio\n    mp3: Music, wav: Music, flac: Music, aac: Music, ogg: Music,\n    // Video\n    mp4: VideoIcon, avi: VideoIcon, mov: VideoIcon, mkv: VideoIcon, webm: VideoIcon,\n    // Code\n    js: CodeIcon, jsx: CodeIcon, ts: CodeIcon, tsx: CodeIcon, html: CodeIcon, css: CodeIcon,\n    scss: CodeIcon, sass: CodeIcon, json: CodeIcon, xml: CodeIcon, py: CodeIcon, java: CodeIcon,\n    cpp: CodeIcon, c: CodeIcon, vue: CodeIcon, php: CodeIcon, rb: CodeIcon, go: CodeIcon,\n    // Documents\n    txt: FileText, md: FileText, pdf: FileText, doc: FileText, docx: FileText,\n    // Archives\n    zip: Archive, rar: Archive, tar: Archive, gz: Archive,\n    // Config\n    env: SettingsIcon, config: SettingsIcon, conf: SettingsIcon, ini: SettingsIcon,\n  };\n\n  const ext = extension?.toLowerCase() || '';\n  return iconMap[ext as keyof typeof iconMap] || File;\n};\n\nconst TreeNode: React.FC<TreeNodeProps> = ({\n  node,\n  level = 0,\n  expandedIds,\n  selectedId,\n  onToggle,\n  onSelect,\n  showIcons = true,\n  showLines = true,\n  iconSize = 16,\n  nodeClassName = \"\",\n  selectedClassName = \"\",\n  hoverClassName = \"\",\n}) => {\n  const isFolder = node.type === 'folder';\n  const hasChildren = node.children && node.children.length > 0;\n  const isExpanded = expandedIds.has(node.id);\n  const isSelected = selectedId === node.id;\n  const IconComponent = isFolder ? (isExpanded ? FolderOpen : Folder) : getFileIcon(node.extension);\n\n  const handleToggle = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (isFolder) {\n      onToggle(node.id);\n    }\n  }, [isFolder, node.id, onToggle]);\n\n  const handleClick = useCallback(() => {\n    if (isFolder && hasChildren) {\n      onToggle(node.id);\n    }\n    onSelect(node);\n  }, [isFolder, hasChildren, node, onToggle, onSelect]);\n\n  const defaultSelectedClass = \"bg-blue-50 dark:bg-blue-900/30 border-r-2 border-blue-500 dark:border-blue-500 text-blue-900 dark:text-blue-200\";\n  const defaultHoverClass = \"hover:bg-gray-50 dark:hover:bg-gray-800\";\n\n  return (\n    <div>\n      <motion.div\n        initial={{ opacity: 0, x: -10 }}\n        animate={{ opacity: 1, x: 0 }}\n        transition={{ duration: 0.2, delay: level * 0.05 }}\n        className={cn(\n          'flex items-center py-2 px-3 cursor-pointer transition-all duration-200 select-none',\n          isSelected ? (selectedClassName || defaultSelectedClass) : '',\n          !isSelected ? (hoverClassName || defaultHoverClass) : '',\n          nodeClassName\n        )}\n        style={{ paddingLeft: `${level * 20 + 12}px` }}\n        onClick={handleClick}\n      >\n        {isFolder && (\n          <motion.span\n            className=\"mr-2 flex-shrink-0\"\n            animate={{ rotate: isExpanded ? 90 : 0 }}\n            transition={{ duration: 0.2 }}\n          >\n            {hasChildren ? (\n              <ChevronRight size={14} className=\"text-gray-500 dark:text-gray-400\" />\n            ) : (\n              <span className=\"w-3.5\" />\n            )}\n          </motion.span>\n        )}\n\n        {!isFolder && <span className=\"w-3.5 mr-2\" />}\n\n        {showIcons && IconComponent && (\n          <IconComponent\n            size={iconSize}\n            className={cn(\n              'mr-3 flex-shrink-0',\n              isFolder \n                ? (isSelected ? 'text-blue-600' : 'text-blue-500') \n                : (isSelected ? 'text-blue-600' : 'text-gray-500')\n            )}\n          />\n        )}\n\n        <span className={cn(\n          'text-sm truncate',\n          isFolder \n            ? 'font-medium text-gray-800 dark:text-gray-200' \n            : 'text-gray-700 dark:text-gray-200'\n        )}>\n          {node.name}\n        </span>\n\n        {node.badge && (\n          <span className=\"ml-auto text-xs bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-300 px-2 py-0.5 rounded-full\">\n            {node.badge}\n          </span>\n        )}\n      </motion.div>\n\n      <AnimatePresence>\n        {isFolder && hasChildren && isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            transition={{ duration: 0.3, ease: 'easeInOut' }}\n            style={{ overflow: 'hidden' }}\n          >\n            {node.children?.map((child) => (\n              <TreeNode\n                key={child.id}\n                node={child}\n                level={level + 1}\n                expandedIds={expandedIds}\n                selectedId={selectedId}\n                onToggle={onToggle}\n                onSelect={onSelect}\n                showIcons={showIcons}\n                showLines={showLines}\n                iconSize={iconSize}\n                nodeClassName={nodeClassName}\n                selectedClassName={selectedClassName}\n                hoverClassName={hoverClassName}\n              />\n            ))}\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nconst FolderTree = React.forwardRef<HTMLDivElement, FolderTreeProps>(({\n  data,\n  onSelect = () => {},\n  onToggle = () => {},\n  initialExpanded = [],\n  initialSelected = null,\n  showIcons = true,\n  showLines = true,\n  containerClassName = \"\",\n  nodeClassName = \"\",\n  selectedClassName = \"\",\n  hoverClassName = \"\",\n  iconSize = 16,\n  maxHeight = \"24rem\",\n  className = \"\",\n}, ref) => {\n  const [expandedIds, setExpandedIds] = React.useState<Set<string>>(new Set(initialExpanded));\n  const [selectedId, setSelectedId] = React.useState<string | null>(initialSelected);\n\n  const handleToggle = useCallback((nodeId: string) => {\n    setExpandedIds(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(nodeId)) {\n        newSet.delete(nodeId);\n      } else {\n        newSet.add(nodeId);\n      }\n      onToggle(nodeId);\n      return newSet;\n    });\n  }, [onToggle]);\n\n  const handleSelect = useCallback((node: TreeNodeType) => {\n    setSelectedId(node.id);\n    onSelect(node);\n  }, [onSelect]);\n\n  return (\n    <motion.div\n      ref={ref}\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.4 }}\n      className={cn(\"bg-white dark:bg-slate-900 border border-gray-200 dark:border-gray-700 rounded-lg shadow-sm overflow-hidden\", className)}\n    >\n      <div\n        className={cn(\"overflow-y-auto\", containerClassName)}\n        style={{ maxHeight }}\n      >\n        {data ? (\n          <TreeNode\n            node={data}\n            expandedIds={expandedIds}\n            selectedId={selectedId}\n            onToggle={handleToggle}\n            onSelect={handleSelect}\n            showIcons={showIcons}\n            showLines={showLines}\n            iconSize={iconSize}\n            nodeClassName={nodeClassName}\n            selectedClassName={selectedClassName}\n            hoverClassName={hoverClassName}\n          />\n        ) : (\n          <div className=\"p-4 text-center text-gray-500 dark:text-gray-400\">\n            No data available\n          </div>\n        )}\n      </div>\n    </motion.div>\n  );\n});\n\nFolderTree.displayName = \"FolderTree\";\n\nexport { FolderTree };\nexport type { TreeNodeType, FolderTreeProps };"
    },
    {
      "type": "registry:lib",
      "path": "lib/utils.ts",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}"
    }
  ]
}
