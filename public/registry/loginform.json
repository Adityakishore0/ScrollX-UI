{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "loginform",
  "type": "registry:component",
  "title": "Login Form",
  "description": "Modern, responsive login form with smooth transitions and gradient accents.",
  "author": "Ahdeetai <https://aditya.is-cool.devis>",
  "dependencies": [
    "framer-motion",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "@radix-ui/react-label",
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "components/ui/loginform.tsx",
      "target": "components/ui/loginform.tsx",
      "content": ""
    },
    {
      "type": "registry:component",
      "path": "components/ui/button.tsx",
      "target": "components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        success: \"bg-green-600 text-white hover:bg-green-700\",\n        warning: \"bg-yellow-500 text-black hover:bg-yellow-600\",\n        info: \"bg-blue-500 text-white hover:bg-blue-600\",\n        dark: \"bg-gray-800 text-white hover:bg-gray-700\",\n        light: \"bg-gray-100 text-gray-800 hover:bg-gray-200\",\n        gradient:\n          \"bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 text-white hover:opacity-90\",\n        glass:\n          \"bg-white/10 backdrop-blur-md text-white border border-white/20 hover:bg-white/20\"\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\"\n    }\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };"
    },
    {
      "type": "registry:component",
      "path": "components/ui/card.tsx",
      "target": "components/ui/card.tsx",
      "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n};"
    },
    {
      "type": "registry:component",
      "path": "components/ui/label.tsx",
      "target": "components/ui/label.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { motion, useInView } from \"framer-motion\"\nimport { cn } from \"@/lib/utils\"\n\ninterface LabelProps extends React.ComponentProps<typeof LabelPrimitive.Root> {\n  direction?: \"left\" | \"right\" | \"top\" | \"bottom\"\n  disableAnimation?: boolean\n}\n\n\nfunction mergeRefs<T>(\n  ...refs: Array<React.Ref<T> | undefined>\n): React.RefCallback<T> {\n  return (value) => {\n    refs.forEach((ref) => {\n      if (!ref) return\n      if (typeof ref === \"function\") ref(value)\n      else (ref as React.MutableRefObject<T | null>).current = value\n    })\n  }\n}\n\nconst MotionLabel = React.forwardRef<\n  HTMLLabelElement,\n  LabelProps & { children?: React.ReactNode }\n>(({ direction = \"left\", disableAnimation, className, ...props }, ref) => {\n  const localRef = React.useRef<HTMLLabelElement>(null)\n  const isInView = useInView(localRef, { once: false, margin: \"-50px\" })\n\n  const variants = {\n    left: { initial: { x: -20 }, animate: { x: 0 } },\n    right: { initial: { x: 20 }, animate: { x: 0 } },\n    top: { initial: { y: -20 }, animate: { y: 0 } },\n    bottom: { initial: { y: 20 }, animate: { y: 0 } },\n  }\n\n  const baseClasses = cn(\n    \"flex items-center gap-2 text-sm leading-none font-medium select-none user-select-none\",\n    \"group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-70\",\n    \"peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n    className\n  )\n\n  if (disableAnimation) {\n    return <LabelPrimitive.Root ref={mergeRefs(ref, localRef)} className={baseClasses} {...props} />\n  }\n\n  return (\n    <motion.label\n      ref={mergeRefs(ref, localRef)}\n      initial={variants[direction].initial}\n      animate={isInView ? variants[direction].animate : variants[direction].initial}\n      transition={{ duration: 0.4, ease: \"easeOut\" }}\n      className={baseClasses}\n      {...props}\n    />\n  )\n})\n\nMotionLabel.displayName = \"MotionLabel\"\n\nexport { MotionLabel as Label }"
    },
    {
      "type": "registry:component",
      "path": "components/ui/transition.tsx",
      "target": "components/ui/transition.tsx",
      "content": "\"use client\";\n\nimport React, { useEffect, useRef, useState, useCallback } from \"react\";\nimport { useInView } from \"framer-motion\";\n\ntype Type = \"curved\" | \"slide\";\ntype Dir = \"top\" | \"bottom\" | \"left\" | \"right\";\n\nexport interface TransitionProps {\n  intro: React.ReactNode | ((triggerExit: () => void) => React.ReactNode);\n  children: React.ReactNode;\n  introDuration?: number;\n  transitionDuration?: number;\n  type?: Type;\n  direction?: Dir;\n  className?: string;\n  skip?: boolean;\n  autoExit?: boolean;\n  trigger?: boolean;\n  onFinished?: () => void;\n}\n\nconst easeInOutCubic = (t: number) =>\n  t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;\n\nexport const Transition: React.FC<TransitionProps> = ({\n  intro,\n  children,\n  introDuration = 1.5,\n  transitionDuration = 0.9,\n  type = \"curved\",\n  direction = \"bottom\",\n  className = \"bg-neutral-900 dark:bg-white\",\n  skip = false,\n  autoExit = true,\n  trigger,\n  onFinished,\n}) => {\n  const [showIntro, setShowIntro] = useState(!skip);\n  const [animating, setAnimating] = useState(false);\n  const [progress, setProgress] = useState(0);\n\n  const ref = useRef<HTMLDivElement>(null);\n  const inView = useInView(ref, { margin: \"-100px\", once: true }); \n  \n  const rafRef = useRef<number | null>(null);\n  const timersRef = useRef<number[]>([]);\n\n  const startTransition = useCallback(() => {\n    setAnimating(true);\n    let startTime: number | null = null;\n\n    const tick = (now: number) => {\n      if (!startTime) startTime = now;\n      const elapsed = (now - startTime) / 1000;\n      const raw = Math.min(elapsed / transitionDuration, 1);\n      const eased = easeInOutCubic(raw);\n      setProgress(eased);\n\n      if (raw < 1) {\n        rafRef.current = requestAnimationFrame(tick);\n      } else {\n        setAnimating(false);\n        setShowIntro(false);\n        setProgress(0);\n        rafRef.current = null;\n        onFinished?.();\n      }\n    };\n\n    rafRef.current = requestAnimationFrame(tick);\n  }, [transitionDuration, onFinished]);\n\n  useEffect(() => {\n    if (skip) {\n      setShowIntro(false);\n      onFinished?.();\n      return;\n    }\n\n    if (inView && autoExit) {\n      const t = window.setTimeout(() => startTransition(), introDuration * 1000);\n      timersRef.current.push(t);\n    }\n\n    const currentTimers = timersRef.current;\n    return () => {\n      currentTimers.forEach(clearTimeout);\n      if (rafRef.current) cancelAnimationFrame(rafRef.current);\n    };\n  }, [skip, inView, introDuration, autoExit, onFinished, startTransition]);\n\n  useEffect(() => {\n    if (!autoExit && trigger && showIntro) {\n      startTransition();\n    }\n  }, [trigger, autoExit, showIntro, startTransition]);\n\n  const getCurvedClip = (p: number) => {\n    const startRadius = 160;\n    const radius = Math.max(0, startRadius * (1 - p));\n    switch (direction) {\n      case \"top\":\n        return `circle(${radius}% at 50% 0%)`;\n      case \"bottom\":\n        return `circle(${radius}% at 50% 100%)`;\n      case \"left\":\n        return `circle(${radius}% at 0% 50%)`;\n      case \"right\":\n      default:\n        return `circle(${radius}% at 100% 50%)`;\n    }\n  };\n\n  const getSlideTransform = (p: number) => {\n    const pct = Math.round(p * 100);\n    switch (direction) {\n      case \"bottom\":\n        return `translateY(${pct}%)`;\n      case \"top\":\n        return `translateY(${-pct}%)`;\n      case \"left\":\n        return `translateX(${-pct}%)`;\n      case \"right\":\n      default:\n        return `translateX(${pct}%)`;\n    }\n  };\n\n  return (\n    <div ref={ref} className=\"relative w-full h-full min-h-full\">\n      <div className=\"relative z-0 w-full h-full\">{children}</div>\n\n      {showIntro && (\n        <div\n          className=\"absolute inset-0 z-40 flex items-center justify-center\"\n          aria-hidden={!showIntro ? undefined : true}\n        >\n          <div\n            className=\"absolute inset-0\"\n            style={\n              type === \"curved\"\n                ? { clipPath: getCurvedClip(progress), transition: animating ? undefined : \"none\" }\n                : { transform: getSlideTransform(progress) }\n            }\n          >\n            <div className={`absolute inset-0 ${className}`} />\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              {typeof intro === \"function\" ? intro(startTransition) : intro}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Transition;"
    },
    {
      "type": "registry:lib",
      "path": "lib/utils.ts",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}"
    }
  ]
}
