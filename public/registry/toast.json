{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "toast",
  "type": "registry:component",
  "title": "Toast",
  "description": "A customizable and responsive toast notification system...",
  "author": "Ahdeetai <https://aditya.is-cool.devis>",
  "dependencies": ["lucide-react", "class-variance-authority"],
  "files": [
    {
      "type": "registry:component",
      "path": "components/ui/toast.tsx",
      "target": "components/ui/toast.tsx",
      "content": "import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { X, CheckCircle, AlertCircle, Info } from \"lucide-react\";\nimport { cva } from \"class-variance-authority\";\n\nconst toastVariants = cva(\n  \"toast-base fixed z-[100] pointer-events-auto flex w-[calc(100%-2rem)] max-w-sm items-center justify-between space-x-4 rounded-lg p-4 pr-8 shadow-lg transition-all duration-300 ease-in-out\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-white text-black border border-gray-200\",\n        success: \"bg-green-100 text-green-900\",\n        destructive: \"bg-red-100 text-red-900\",\n        warning: \"bg-yellow-100 text-yellow-900\",\n        info: \"bg-blue-100 text-blue-900\"\n      },\n      position: {\n        \"top-right\": \"top-4 right-4 animate-slide-in-right\",\n        \"top-left\": \"top-4 left-4 animate-slide-in-left\",\n        \"bottom-right\": \"bottom-4 right-4 animate-slide-in-right\",\n        \"bottom-left\": \"bottom-4 left-4 animate-slide-in-left\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      position: \"top-right\"\n    }\n  }\n);\n\nconst ToastIcons = {\n  success: <CheckCircle className=\"w-5 h-5 text-green-500\" />,\n  destructive: <AlertCircle className=\"w-5 h-5 text-red-500\" />,\n  warning: <AlertCircle className=\"w-5 h-5 text-yellow-500\" />,\n  info: <Info className=\"w-5 h-5 text-blue-500\" />\n};\n\ninterface ToastProps {\n  id?: string;\n  title?: string;\n  description?: string;\n  variant?: \"default\" | \"success\" | \"destructive\" | \"warning\" | \"info\";\n  position?: \"top-right\" | \"top-left\" | \"bottom-right\" | \"bottom-left\";\n  duration?: number;\n  onClose?: () => void;\n  action?: React.ReactNode;\n}\n\nconst Toast: React.FC<ToastProps> = ({\n  id,\n  title,\n  description,\n  variant = \"default\",\n  position = \"top-right\",\n  duration = 5000,\n  onClose,\n  action\n}) => {\n  const [isVisible, setIsVisible] = useState(true);\n  const [isHovering, setIsHovering] = useState(false);\n  const [translateX, setTranslateX] = useState(0);\n  const toastRef = useRef<HTMLDivElement>(null);\n  const closeButtonRef = useRef<HTMLButtonElement>(null);\n  const startX = useRef(0);\n  const startY = useRef(0);\n  const isDragging = useRef(false);\n  const isTouchAction = useRef(false);\n\n  const handleClose = useCallback(\n    (e?: React.UIEvent) => {\n      if (e) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n      setIsVisible(false);\n      setTimeout(() => {\n        onClose?.();\n      }, 300);\n    },\n    [onClose]\n  );\n\n  const handleTouchStart = useCallback((e: React.TouchEvent | React.MouseEvent) => {\n    if (e.target instanceof Element) {\n      if (\n        closeButtonRef.current?.contains(e.target) ||\n        e.target.closest('button[role=\"button\"]')\n      ) {\n        isTouchAction.current = true;\n        return;\n      }\n    }\n    e.stopPropagation();\n    const clientX = 'touches' in e ? e.touches[0].clientX : (e as React.MouseEvent).clientX;\n    const clientY = 'touches' in e ? e.touches[0].clientY : (e as React.MouseEvent).clientY;\n    startX.current = clientX;\n    startY.current = clientY;\n    isDragging.current = true;\n  }, []);\n\n  const handleTouchMove = useCallback((e: React.TouchEvent | React.MouseEvent) => {\n    if (isTouchAction.current || !isDragging.current || !toastRef.current) return;\n    e.stopPropagation();\n    e.preventDefault();\n    const clientX = 'touches' in e ? e.touches[0].clientX : (e as React.MouseEvent).clientX;\n    const diff = clientX - startX.current;\n    setTranslateX(diff);\n  }, []);\n\n  const handleTouchEnd = useCallback((e: React.TouchEvent | React.MouseEvent) => {\n    if (isTouchAction.current) {\n      isTouchAction.current = false;\n      return;\n    }\n    if (!isDragging.current || !toastRef.current) return;\n    e.stopPropagation();\n    const toastWidth = toastRef.current.offsetWidth;\n    const swipeThreshold = toastWidth * 0.5;\n    if (Math.abs(translateX) >= swipeThreshold) {\n      handleClose();\n    } else {\n      setTranslateX(0);\n    }\n    isDragging.current = false;\n  }, [translateX, handleClose]);\n\n  const wrappedAction = action ? React.cloneElement(action as React.ReactElement, {\n    onClick: (e: React.MouseEvent) => {\n      e.stopPropagation();\n      const originalOnClick = (action as React.ReactElement).props.onClick;\n      if (originalOnClick) originalOnClick(e);\n      handleClose();\n    }\n  }) : null;\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    if (!isHovering && duration > 0) {\n      timer = setTimeout(() => {\n        handleClose();\n      }, duration);\n    }\n    return () => clearTimeout(timer);\n  }, [duration, isHovering, handleClose]);\n\n  useEffect(() => {\n    const currentRef = toastRef.current;\n    if (currentRef) {\n      const touchStartOptions = { passive: false };\n\n      currentRef.addEventListener(\"touchstart\", handleTouchStart as unknown as EventListener, touchStartOptions);\n      window.addEventListener(\"touchmove\", handleTouchMove as unknown as EventListener, { passive: false });\n      window.addEventListener(\"touchend\", handleTouchEnd as unknown as EventListener);\n\n      currentRef.addEventListener(\"mousedown\", handleTouchStart as unknown as EventListener);\n      window.addEventListener(\"mousemove\", handleTouchMove as unknown as EventListener);\n      window.addEventListener(\"mouseup\", handleTouchEnd as unknown as EventListener);\n    }\n    return () => {\n      if (currentRef) {\n        currentRef.removeEventListener(\"touchstart\", handleTouchStart as unknown as EventListener);\n        window.removeEventListener(\"touchmove\", handleTouchMove as unknown as EventListener);\n        window.removeEventListener(\"touchend\", handleTouchEnd as unknown as EventListener);\n\n        currentRef.removeEventListener(\"mousedown\", handleTouchStart as unknown as EventListener);\n        window.removeEventListener(\"mousemove\", handleTouchMove as unknown as EventListener);\n        window.removeEventListener(\"mouseup\", handleTouchEnd as unknown as EventListener);\n      }\n    };\n  }, [handleTouchStart, handleTouchMove, handleTouchEnd]);\n\n  if (!isVisible) return null;\n\n  return (\n    <div\n      ref={toastRef}\n      role=\"alert\"\n      aria-live=\"polite\"\n      className={`${toastVariants({ variant, position })} ${isVisible ? \"opacity-100\" : \"opacity-0\"}`}\n      style={{\n        transform: `translateX(${translateX}px)`,\n        opacity: 1 - Math.abs(translateX) / (toastRef.current?.offsetWidth || 300)\n      }}\n      onMouseEnter={() => setIsHovering(true)}\n      onMouseLeave={() => setIsHovering(false)}\n    >\n      <div className=\"flex items-center space-x-3 w-full\">\n        {variant !== \"default\" && ToastIcons[variant]}\n        <div className=\"flex-1\">\n          {title && <div className=\"font-semibold\">{title}</div>}\n          {description && <div className=\"text-sm opacity-80\">{description}</div>}\n        </div>\n      </div>\n      {wrappedAction && <div className=\"ml-auto\">{wrappedAction}</div>}\n      <button\n        ref={closeButtonRef}\n        onClick={handleClose}\n        className=\"absolute top-2 right-2 hover:opacity-75 transition-opacity z-10 p-1\"\n        aria-label=\"Close\"\n      >\n        <X className=\"w-4 h-4\" />\n      </button>\n    </div>\n  );\n};\n\ninterface ToastContextType {\n  toast: (props: ToastProps) => void;\n}\n\nconst ToastContext = React.createContext<ToastContextType | undefined>(undefined);\n\nexport const ToastProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [toasts, setToasts] = useState<ToastProps[]>([]);\n\n  const toast = useCallback((props: ToastProps) => {\n    const id = Math.random().toString(36).substr(2, 9);\n    setToasts((current) => [...current, { ...props, id }]);\n  }, []);\n\n  const removeToast = useCallback((id: string) => {\n    setToasts((current) => current.filter((toast) => toast.id !== id));\n  }, []);\n\n  return (\n    <ToastContext.Provider value={{ toast }}>\n      {children}\n      <div className=\"fixed inset-0 pointer-events-none flex flex-col items-stretch z-[100]\">\n        {toasts.map((toastProps) => (\n          <Toast\n            key={toastProps.id}\n            {...toastProps}\n            onClose={() => removeToast(toastProps.id!)}\n          />\n        ))}\n      </div>\n    </ToastContext.Provider>\n  );\n};\n\nexport const useToast = () => {\n  const context = React.useContext(ToastContext);\n  if (!context) {\n    throw new Error(\"useToast must be used within a ToastProvider\");\n  }\n  return context;\n};\n\nexport default Toast;"
    }
  ]
}
